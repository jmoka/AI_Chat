[
  {
    "role": "user",
    "content": "import { enviarMensagem } from '../controllers/enviarMensagem.js';\nimport { listaHistorico } from '../controllers/historicoMSG.js';\nimport salvarConversa from '../controllers/salvarMensagens.js';\nimport EscolherModelo from '../controllers/escolherModelo.js';\nimport { contarTokens } from '../controllers/contarTokens.js';\nimport { resumirTexto } from '../controllers/resumirTexto.js';\n\nexport function rotaChat(app) {\n  app.post('/api/chat', async (req, res) => {\n    try {\n      const {\n        mensagem,\n        historico = [], // hist√≥rico do front (se vier)\n        orientacaoUsuario = \"\",\n        modelo,\n      } = req.body;\n\n      if (!mensagem || mensagem.trim() === \"\") {\n        return res.status(400).json({ error: \"Campo obrigat√≥rio: mensagem n√£o pode estar vazia.\" });\n      }\n\n      // üîÅ Recupera hist√≥rico salvo nos logs\n      const historicoSalvo = listaHistorico();\n\n      // üîÑ Mescla hist√≥rico do front com do log (opcional)\n      const historicoTotal = [...historicoSalvo, ...historico];\n\n      // ‚è≥ Ordena por timestamp (mais antigo primeiro)\n      historicoTotal.sort((a, b) => {\n        if (a.timestamp && b.timestamp) {\n          return new Date(a.timestamp) - new Date(b.timestamp);\n        }\n        return 0;\n      });\n\n      // üìù Concatena e resume hist√≥rico se necess√°rio\n      const textoHistorico = historicoTotal.map(msg => `${msg.role}: ${msg.content}`).join(\"\\n\");\n      const resumoHistorico = textoHistorico.length > 1000\n        ? await resumirTexto(textoHistorico)\n        : textoHistorico;\n\n      const orientacaoPadrao = `Voc√™ √© um assistente que sempre responde em HTML. Retorne apenas HTML v√°lido sem explica√ß√µes.`;\n\n      const mensagens = [\n        { role: \"system\", content: `${orientacaoPadrao}\\n${orientacaoUsuario}` },\n        { role: \"system\", content: `Resumo do hist√≥rico:\\n${resumoHistorico}` },\n        { role: \"user\", content: mensagem }\n      ];\n\n      // üî¢ Conta os tokens\n      const totalTokens = contarTokens(mensagens.map(m => m.content).join(\" \"));\n      if (totalTokens > 5900) {\n        console.warn(\"‚ö†Ô∏è Reduzindo contexto por excesso de tokens...\");\n        mensagens.splice(1, mensagens.length - 2); // Remove o resumo\n        mensagens.unshift({ role: \"system\", content: orientacaoPadrao });\n      }\n\n      console.log(\"üß™ Mensagens finais:\", mensagens);\n\n      const modeloEscolhido = EscolherModelo(modelo);\n\n      const resposta = await enviarMensagem(mensagens, modelo);\n      const respostaDaIA = resposta.choices[0]?.message?.content || \"\";\n\n      const mensagemSalvaJSON = [\n        { role: \"user\", content: mensagem },\n        { role: \"assistant\", content: respostaDaIA }\n      ];\n\n      salvarConversa(mensagemSalvaJSON);\n\n      return res.json({\n        resposta: respostaDaIA,\n        modeloUsado: modeloEscolhido,\n      });\n\n    } catch (erro) {\n      console.error(\"‚ùå Erro na rota /api/chat:\", erro);\n      return res.status(500).json({ error: \"Erro ao gerar resposta com modelo LLM.\" });\n    }\n  });\n}\n\n\nesta certo?"
  },
  {
    "role": "assistant",
    "content": "<!DOCTYPE html>\n<html>\n <head>\n <title>Resposta</title>\n </head>\n <body>\n <h1>Sim, o c√≥digo parece estar estruturado corretamente!</h1>\n <p>O c√≥digo est√° bem organizado e segue boas pr√°ticas.</p>\n </body>\n</html>"
  }
]