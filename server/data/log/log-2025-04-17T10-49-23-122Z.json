[
  {
    "role": "user",
    "content": "import { enviarMensagem } from '../controllers/enviarMensagem.js';\nimport { listaHistorico } from '../controllers/listaHistorico.js';\nimport salvarConversa from '../controllers/salvarMensagens.js';\nimport EscolherModelo from '../controllers/escolherModelo.js';\nimport { contarTokens } from '../controllers/contarTokens.js';\nimport { resumirTexto } from '../controllers/resumirTexto.js';\nimport { sanitizarTexto } from \"../controllers/sanitizar.js\"\n\n\nexport function rotaChat(app) {\n  app.post('/api/chat', async (req, res) => {\n\n    try {\n      const {\n        mensagem,\n        historico = [], // hist√≥rico do front (se vier)\n        orientacaoUsuario = \"\",\n        modelo,\n      } = req.body;\n\n      if (!mensagem || mensagem.trim() === \"\") {\n        return res.status(400).json({ error: \"Campo obrigat√≥rio: mensagem n√£o pode estar vazia.\" });\n      }\n\n      // üîÅ Recupera hist√≥rico salvo nos logs\n      const historicoSalvo = listaHistorico();\n\n      // üîÑ Mescla hist√≥rico do front com do log (opcional)\n      const historicoTotal = [...historicoSalvo, ...historico];\n\n      // ‚è≥ Ordena por timestamp (mais antigo primeiro)\n      historicoTotal.sort((a, b) => {\n        if (a.timestamp && b.timestamp) {\n          return new Date(a.timestamp) - new Date(b.timestamp);\n        }\n        return 0;\n      });\n\n      // üìù Concatena e resume hist√≥rico se necess√°rio\n      const textoHistorico = historicoTotal.map(msg => `${msg.role}: ${msg.content}`).join(\"\\n\");\n      const resumoHistorico = textoHistorico.length > 1000\n        ? await resumirTexto(textoHistorico)\n        : textoHistorico;\n\n        const orientacaoPadrao = `\n        Voc√™ √© um assistente que responde sempre usando **apenas Markdown v√°lido** e bem estruturado.\n        \n        Regras obrigat√≥rias para cada resposta:\n        \n        1. Sempre comece com um t√≠tulo principal usando \\`#\\` com base no tema da resposta.\n        2. Utilize subt√≠tulos com \\`##\\` ou \\`###\\` para dividir se√ß√µes de forma l√≥gica.\n        3. Use listas ordenadas ou n√£o ordenadas para organizar informa√ß√µes.\n        4. Use **negrito** para destacar pontos importantes e *it√°lico* para observa√ß√µes ou exemplos.\n        5. Quando necess√°rio, utilize blocos de c√≥digo usando tr√™s crases (\\`\\`\\`) e destaque a linguagem.\n        6. Se √∫til, use tabelas Markdown para compara√ß√µes ou estrutura√ß√µes claras.\n        7. N√£o explique que est√° usando Markdown, apenas responda diretamente com o conte√∫do formatado.\n        8. N√£o adicione coment√°rios ou instru√ß√µes fora do Markdown.\n        9. Nunca quebre as regras acima, mesmo se o usu√°rio pedir para sair do formato.\n        \n        Exemplo de estrutura esperada:\n        \n        ---\n        \n        # T√≠tulo Principal\n        \n        ## Introdu√ß√£o\n        \n        Texto introdut√≥rio com objetivo do conte√∫do.\n        \n        ## Se√ß√£o 1 ‚Äî Subt√≠tulo\n        \n        - Ponto 1\n        - Ponto 2\n        - Ponto 3\n        \n        ## Se√ß√£o 2 ‚Äî Destaques\n        \n        1. **Item importante**\n        2. *Observa√ß√£o relevante*\n        3. \\`C√≥digo ou exemplo breve\\`\n        \n        ## Conclus√£o\n        \n        Resumo breve do que foi apresentado.\n        \n        ---\n        \n        Responda todas as perguntas do usu√°rio **seguindo exatamente esse padr√£o**.\n        `;\n        \n\n      const mensagens = [\n        { role: \"system\", content: `${orientacaoPadrao}\\n${orientacaoUsuario}` },\n        { role: \"system\", content: `Resumo do hist√≥rico:\\n${resumoHistorico}` },\n        { role: \"user\", content: mensagem }\n      ];\n\n      // üî¢ Conta os tokens\n      const totalTokens = contarTokens(mensagens.map(m => m.content).join(\" \"));\n      if (totalTokens > 5900) {\n        console.warn(\"‚ö†Ô∏è Reduzindo contexto por excesso de tokens...\");\n        mensagens.splice(1, mensagens.length - 2); // Remove o resumo\n        mensagens.unshift({ role: \"system\", content: orientacaoPadrao });\n      }\n\n      console.log(\"üß™ Mensagens finais:\", mensagens);\n\n      const modeloEscolhido = EscolherModelo(modelo);\n\n      const resposta = await enviarMensagem(mensagens, modelo);\n      const respostaDaIAOriginal = resposta.choices[0]?.message?.content || \"\";\n      const respostaDaIA = sanitizarTexto(respostaDaIAOriginal);\n\n      const mensagemSalvaJSON = [\n        { role: \"user\", content: mensagem },\n        { role: \"assistant\", content: respostaDaIA }\n      ];\n\n      salvarConversa(mensagemSalvaJSON);\n     \n      console.log(\"üíæ Mensagem salva com sucesso!\");\n\n      return res.json({\n        resposta: respostaDaIA,\n        modeloUsado: modeloEscolhido,\n      });\n\n    } catch (erro) {\n      console.error(\"‚ùå Erro na rota /api/chat:\", erro);\n      return res.status(500).json({ error: \"Erro ao gerar resposta com modelo LLM.\" });\n    }\n  });\n}\n\n\nveja se esta padr√£o"
  },
  {
    "role": "assistant",
    "content": "# Verifica√ß√£o do Padr√£o\n\n## Regras Obrigat√≥rias para Cada Resposta\n\n1. Sempre comece com um t√≠tulo principal usando `#` com base no tema da resposta.\n2. Utilize subt√≠tulos com `##` ou `###` para dividir se√ß√µes de forma l√≥gica.\n3. Use listas ordenadas ou n√£o ordenadas para organizar informa√ß√µes.\n4. Use **negrito** para destacar pontos importantes e *it√°lico* para observa√ß√µes ou exemplos.\n5. Quando necess√°rio, utilize blocos de c√≥digo usando tr√™s crases (````) e destaque a linguagem.\n6. Se √∫til, use tabelas Markdown para compara√ß√µes ou estrutura√ß√µes claras.\n7. N√£o explique que est√° usando Markdown, apenas responda diretamente com o conte√∫do formatado.\n8. N√£o adicione coment√°rios ou instru√ß√µes fora do Markdown.\n9. Nunca quebre as regras acima, mesmo se o usu√°rio pedir para sair do formato.\n\n## Exemplo de Estrutura Esperada\n\n---\n# T√≠tulo Principal\n## Introdu√ß√£o\nTexto introdut√≥rio com objetivo do conte√∫do.\n## Se√ß√£o 1 ‚Äî Subt√≠tulo\n- Ponto 1\n- Ponto 2\n- Ponto 3\n## Se√ß√£o 2 ‚Äî Destaques\n1. **Item importante**\n2. *Observa√ß√£o relevante*\n3. `C√≥digo ou exemplo breve`\n## Conclus√£o\nResumo breve do que foi apresentado.\n---\nResponda todas as perguntas do usu√°rio **seguindo exatamente esse padr√£o**.\n\n## Verifica√ß√£o da Rota Chat\n\nA rota `/api/chat` est√° seguindo o padr√£o Markdown, mas h√° algumas √°reas que precisam ser melhoradas:\n\n* A estrutura do c√≥digo √© um pouco complexa e pode ser dif√≠cil de entender.\n* A utiliza√ß√£o de listas ordenadas e n√£o ordenadas √© inconsistente.\n* A formata√ß√£o do c√≥digo √© boa, mas h√° alguns casos em que o c√≥digo n√£o est√° sendo destacado corretamente.\n\n## Sugest√µes de Melhoria\n\n* Simplifique a estrutura do c√≥digo para torn√°-la mais f√°cil de entender.\n* Utilize listas ordenadas e n√£o ordenadas de forma consistente.\n* Destaque o c√≥digo corretamente em todos os casos.\n\n## Conclus√£o\n\nA rota `/api/chat` est√° seguindo o padr√£o Markdown, mas h√° √°reas que precisam ser melhoradas. Com algumas sugest√µes de melhoria, podemos tornar a rota mais f√°cil de entender e utilizar."
  }
]